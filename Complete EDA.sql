CREATE TABLE SUPERSTORE(
							ORDER_ID TEXT PRIMARY KEY,
							ORDER_DATE DATE,
							ORDER_PRIORITY TEXT,
							SHIP_DATE DATE,
							SHIPPING_DELAY INTEGER,
							SHIP_MODE TEXT,
							SHIPPING_COST FLOAT,
							CUSTOMER_ID TEXT,
								CUSTOMER_NAME TEXT,
								SEGMENT TEXT,
								CUSTOMER_TENURE TEXT,
								PAYMENT_METHOD TEXT,
								COUNTRY TEXT,
								STATE TEXT,
								CITY TEXT,
								POSTAL_CODE TEXT,
								REGION TEXT,
								 product_id TEXT,
  product_name TEXT,
  category TEXT,
  sub_category TEXT,
  product_rating DOUBLE PRECISION,
  marketing_channel TEXT,
  quantity INTEGER,
  return_status TEXT,
  discount DOUBLE PRECISION,
  sales NUMERIC,
  profit NUMERIC,
  profit_margin DOUBLE PRECISION,
  discount_reason TEXT
)

CREATE TABLE ORDER_DETAILS (
							ORDER_ID TEXT PRIMARY KEY,
							ORDER_DATE DATE,
							ORDER_PRIORITY TEXT,
							SHIP_DATE DATE,
							SHIPPING_DELAY INTEGER,
							SHIP_MODE TEXT,
							SHIPPING_COST FLOAT
							
)


CREATE TABLE CUSTOMER_DETAILS1(
								ORDER_ID TEXT PRIMARY KEY,
								CUSTOMER_ID TEXT,
								CUSTOMER_NAME TEXT,
								SEGMENT TEXT,
								CUSTOMER_TENURE TEXT,
								PAYMENT_METHOD TEXT,
								COUNTRY TEXT,
								STATE TEXT,
								CITY TEXT,
								POSTAL_CODE TEXT,
								REGION TEXT,
								FOREIGN KEY (ORDER_ID) REFERENCES ORDER_DETAILS(ORDER_ID)
)

CREATE TABLE product_info (
  order_id TEXT ,
  product_id TEXT,
  product_name TEXT,
  category TEXT,
  sub_category TEXT,
  product_rating DOUBLE PRECISION,
  marketing_channel TEXT,
  quantity INTEGER,
  return_status TEXT,
  discount DOUBLE PRECISION,
  sales NUMERIC,
  profit NUMERIC,
  profit_margin DOUBLE PRECISION,
  discount_reason TEXT,
  FOREIGN KEY (ORDER_ID) REFERENCES ORDER_DETAILS(ORDER_ID)
)


__________________________________________________________________________________________________________________________________________________________

---TOP PERFORMED PRODUCT BY TOTAL SALES
SELECT 
	PRODUCT_NAME,
	TO_CHAR(SUM(SALES),'FM₹999,999,999.00') AS TOTAL_SALES
	FROM PRODUCT_INFO
	GROUP BY PRODUCT_NAME
	ORDER BY TOTAL_SALES DESC
	LIMIT 10

"2300 Heavy-Duty Transfer File Systems by Perma"
"Xerox Blank Computer Paper"
"Avery Durable Plastic 1"" Binders"
"GBC Personal VeloBind Strips"
"Master Caster Door Stop, Large Neon Orange"
"Samsung Replacement EH64AVFWE Premium Headset"
"BoxOffice By Design Rectangular and Half-Moon Meeting Room Tables"
"Executive Impressions 12"" Wall Clock"
"GE 4 Foot Flourescent Tube, 40 Watt"
"DAX Cubicle Frames - 8x10"


---AVERAGE SHIPPING DELAY FOR EACH REGION
SELECT 
		CUSTOMER_DETAILS1.REGION,
		AVG(ORDER_DETAILS.SHIPPING_DELAY) AS AVERAGE_SHIPPING_DELAY
		FROM CUSTOMER_DETAILS1 JOIN ORDER_DETAILS ON CUSTOMER_DETAILS1.ORDER_ID = ORDER_DETAILS.ORDER_ID
		GROUP BY REGION
		ORDER BY AVERAGE_SHIPPING_DELAY DESC
		
"Central"	4.0085106382978723
"South"	3.9732360097323601
"East"	3.9364285714285714
"West"	3.9304779639975171

---
SELECT ORDER_DETAILS.ORDER_ID,ORDER_DETAILS.SHIPPING_DELAY,PRODUCT_INFO.RETURN_STATUS
FROM ORDER_DETAILS JOIN PRODUCT_INFO ON ORDER_DETAILS.ORDER_ID = PRODUCT_INFO.ORDER_ID
WHERE ORDER_DETAILS.SHIPPING_DELAY > 5 
AND PRODUCT_INFO.RETURN_STATUS = 'Yes'


----
SELECT 
	   EXTRACT(MONTH FROM ORDER_DATE) AS MONTH_NUMBER,
	   TO_CHAR (ORDER_DETAILS.ORDER_DATE, 'MONTH') AS MONTH_NAME, 
	   TO_CHAR(SUM(PRODUCT_DETAILS1.SALES), 'FM₹999,999,999.00') AS TOTAL_SALES,
	   TO_CHAR(SUM(PRODUCT_DETAILS1.PROFIT), 'FM₹999,999,999.00' )AS TOTAL_PROFIT
	   FROM ORDER_DETAILS JOIN PRODUCT_DETAILS1 ON ORDER_DETAILS.ORDER_ID = PRODUCT_DETAILS1.ORDER_ID
	   GROUP BY MONTH_NUMBER,MONTH_NAME
	   ORDER BY MONTH_NUMBER

---
SELECT 
		CUSTOMER_DETAILS1.SEGMENT,
		TO_CHAR(SUM(PRODUCT_DETAILS1.PROFIT),'FM₹999,999,999.00') AS TOTAL_PROFIT,
		TO_CHAR(SUM(PRODUCT_DETAILS1.SALES), 'FM₹999,999,999.00' )AS TOTAL_SALES
		FROM CUSTOMER_DETAILS1 JOIN PRODUCT_DETAILS1 ON CUSTOMER_DETAILS1.ORDER_ID = PRODUCT_DETAILS1.ORDER_ID
		GROUP BY CUSTOMER_DETAILS1.SEGMENT

---
SELECT 
		SUB_CATEGORY,
		TO_CHAR(SUM(PROFIT),'FM₹999,999,999.00') AS TOTAL_PROFIT
		FROM PRODUCT_DETAILS1
		GROUP BY SUB_CATEGORY 
		ORDER BY TOTAL_PROFIT DESC

---
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_name = 'product_details1'

SELECT
		CATEGORY,
		TO_CHAR(
		COUNT(CASE WHEN RETURN_STATUS = 'Yes' THEN 1 END)::FLOAT /
		COUNT(ORDER_ID) * 100, 'FM999.00%') AS RETURN_RATE_PERCENTAGE
		FROM PRODUCT_DETAILS1
		GROUP BY CATEGORY

---
SELECT *
		FROM PRODUCT_INFO
		WHERE PROFIT < 0
			AND DISCOUNT * 100 > 30;

---
SELECT
		DISCOUNT_REASON,
		TO_CHAR(SUM(SALES),'FM₹999,999,999.00') AS TOTAL_SALES,
		TO_CHAR(COUNT(CASE WHEN RETURN_STATUS = 'Yes' THEN 1 END)::FLOAT, 'FM999,999,999') AS TOTAL_RETURN
		FROM PRODUCT_INFO
		GROUP BY DISCOUNT_REASON
		ORDER BY TOTAL_SALES DESC

---
SELECT RETURN_STATUS, 
	   AVG(SALES) AS AVERAGE_SALES
	   FROM PRODUCT_INFO
	   GROUP BY RETURN_STATUS
	   ORDER BY AVERAGE_SALES DESC

---
SELECT 
		CUSTOMER_DETAILS1.STATE,
		COUNT(PRODUCT_INFO.ORDER_ID) AS NUMBER_OF_ORDERS,
		---SUM(PRODUCT_INFO.SALES) AS TOTAL_SALES,
		SUM(PRODUCT_INFO.PROFIT) AS TOTAL_PROFIT
		FROM CUSTOMER_DETAILS1 FULL JOIN PRODUCT_INFO ON CUSTOMER_DETAILS1.ORDER_ID = PRODUCT_INFO.ORDER_ID
		GROUP BY CUSTOMER_DETAILS1.STATE
		---ORDER BY TOTAL_SALES DESC
		HAVING
			SUM(PRODUCT_INFO.SALES) > 500000

SELECT 
		CUSTOMER_ID
		FROM CUSTOMER_DETAILS1
		GROUP BY CUSTOMER_ID
		HAVING
			COUNT(ORDER_ID) > 5

_______________________________________________________________________________
		
SELECT
		CUSTOMER_DETAILS1.CUSTOMER_NAME,
		TO_CHAR(COUNT(CUSTOMER_DETAILS1.ORDER_ID), 'FM999,999,999')::NUMERIC AS TOTAL_ORDER,
		SUM(PRODUCT_INFO.SALES) AS TOTAL_SALES
		FROM CUSTOMER_DETAILS1 JOIN PRODUCT_INFO ON CUSTOMER_DETAILS1.ORDER_ID = PRODUCT_INFO.ORDER_ID
		GROUP BY CUSTOMER_DETAILS1.CUSTOMER_NAME
		ORDER BY TOTAL_SALES DESC
	 ---ORDER BY TOTAL_ORDER DESC
_______________________________________________________________________________________________________________--

SELECT 
	CATEGORY,
	COUNT (DISTINCT PRODUCT_ID) AS NUMBER_OF_UNIQUE_PRODUCT_SOLDOUT
	FROM PRODUCT_INFO
	GROUP BY CATEGORY
UNION ALL
SELECT 
	'TOTAL' AS CATEGORY,
	COUNT(DISTINCT PRODUCT_ID) AS NUMBER_OF_UNIQUE_PRODUCT_SOLDOUT
	FROM
	PRODUCT_INFO
___________________________________________________________________________________________________________________

SELECT
	CUSTOMER_DETAILS1.REGION,
	CUSTOMER_DETAILS1.SEGMENT,
	TO_CHAR(AVG(PRODUCT_INFO.DISCOUNT)*100, 'FM999.00%') AS AVERAGE_DISCOUNT
	FROM CUSTOMER_DETAILS1 JOIN PRODUCT_INFO ON CUSTOMER_DETAILS1.ORDER_ID = PRODUCT_INFO.ORDER_ID
	GROUP BY CUSTOMER_DETAILS1.REGION,CUSTOMER_DETAILS1.SEGMENT
	ORDER BY CUSTOMER_DETAILS1.REGION

______________________________________________________________________________________________________________________
---Creating a new table by reference of existing tables
CREATE TABLE SUPERSTORE AS
	SELECT 
			ORDER_DETAILS.ORDER_ID,
			ORDER_DETAILS.ORDER_DATE,
			ORDER_DETAILS.ORDER_PRIORITY,
			ORDER_DETAILS.SHIP_DATE,
			ORDER_DETAILS.SHIPPING_DELAY,
			ORDER_DETAILS.SHIP_MODE,
			ORDER_DETAILS.SHIPPING_COST,
			CUSTOMER_DETAILS1.CUSTOMER_ID,
			CUSTOMER_DETAILS1.CUSTOMER_NAME,
			CUSTOMER_DETAILS1.SEGMENT,
			CUSTOMER_DETAILS1.CUSTOMER_TENURE,
			CUSTOMER_DETAILS1.PAYMENT_METHOD,
			CUSTOMER_DETAILS1.COUNTRY,
			CUSTOMER_DETAILS1.STATE,
			CUSTOMER_DETAILS1.CITY,
			CUSTOMER_DETAILS1.POSTAL_CODE,
			CUSTOMER_DETAILS1.REGION,
			PRODUCT_INFO.PRODUCT_ID,
			PRODUCT_INFO.PRODUCT_NAME,
			PRODUCT_INFO.CATEGORY,
			PRODUCT_INFO.SUB_CATEGORY,
			PRODUCT_INFO.PRODUCT_RATING,
			PRODUCT_INFO.MARKETING_CHANNEL,
			PRODUCT_INFO.QUANTITY,
			PRODUCT_INFO.RETURN_STATUS,
			PRODUCT_INFO.DISCOUNT,
			PRODUCT_INFO.SALES,
			PRODUCT_INFO.PROFIT,
			PRODUCT_INFO.PROFIT_MARGIN,
			PRODUCT_INFO.DISCOUNT_REASON
	FROM 
		ORDER_DETAILS
	JOIN 
		CUSTOMER_DETAILS1 ON ORDER_DETAILS.ORDER_ID = CUSTOMER_DETAILS1.ORDER_ID
	JOIN
		PRODUCT_INFO ON ORDER_DETAILS.ORDER_ID = PRODUCT_INFO.ORDER_ID

SELECT * FROM SUPERSTORE
_______________________________________________________________________________________________________________________

---Order Summary
CREATE TABLE ORDER_SUMMARY AS 
SELECT
			ORDER_ID,
			ORDER_DATE,
			ORDER_PRIORITY,
			SHIP_DATE,
			SHIPPING_DELAY,
			SHIP_MODE,
			SHIPPING_COST,
			CUSTOMER_ID,
			CUSTOMER_NAME,
			SEGMENT,
			CUSTOMER_TENURE,
			PAYMENT_METHOD,
			COUNTRY,
			STATE,
			CITY,
			POSTAL_CODE,
			REGION,
			PRODUCT_ID,
			PRODUCT_NAME,
			CATEGORY,
			SUB_CATEGORY,
			PRODUCT_RATING,
			MARKETING_CHANNEL,
			QUANTITY,
			RETURN_STATUS,
			DISCOUNT,
			SALES,
			PROFIT,
			PROFIT_MARGIN,
			DISCOUNT_REASON
	FROM
		SUPERSTORE
	WHERE 
		ORDER_DATE >= DATE '2015-01-01'
		
SELECT * FROM ORDER_SUMMARY 

__________________________________________________________________________________________________________________________________________

----Focus on higher-value transactions 
CREATE TABLE HIGHER_VALUE_TRANSACTIONS as 
SELECT
			ORDER_ID,
			ORDER_DATE,
			ORDER_PRIORITY,
			SHIP_DATE,
			SHIPPING_DELAY,
			SHIP_MODE,
			SHIPPING_COST,
			CUSTOMER_ID,
			CUSTOMER_NAME,
			SEGMENT,
			CUSTOMER_TENURE,
			PAYMENT_METHOD,
			COUNTRY,
			STATE,
			CITY,
			POSTAL_CODE,
			REGION,
			PRODUCT_ID,
			PRODUCT_NAME,
			CATEGORY,
			SUB_CATEGORY,
			PRODUCT_RATING,
			MARKETING_CHANNEL,
			QUANTITY,
			RETURN_STATUS,
			DISCOUNT,
			SALES,
			PROFIT,
			PROFIT_MARGIN,
			DISCOUNT_REASON
	FROM
		SUPERSTORE
	WHERE 
		SALES >= 200
SELECT * FROM HIGHER_VALUE_TRANSACTIONS

__________________________________________________________________________________________________________________
---Limit the data to customers in the Consumer or Corporate segments
CREATE TABLE CC_SEGMENTS AS
SELECT
			ORDER_ID,
			ORDER_DATE,
			ORDER_PRIORITY,
			SHIP_DATE,
			SHIPPING_DELAY,
			SHIP_MODE,
			SHIPPING_COST,
			CUSTOMER_ID,
			CUSTOMER_NAME,
			SEGMENT,
			CUSTOMER_TENURE,
			PAYMENT_METHOD,
			COUNTRY,
			STATE,
			CITY,
			POSTAL_CODE,
			REGION,
			PRODUCT_ID,
			PRODUCT_NAME,
			CATEGORY,
			SUB_CATEGORY,
			PRODUCT_RATING,
			MARKETING_CHANNEL,
			QUANTITY,
			RETURN_STATUS,
			DISCOUNT,
			SALES,
			PROFIT,
			PROFIT_MARGIN,
			DISCOUNT_REASON
	FROM
		SUPERSTORE
	WHERE 
		SEGMENT IN ('Consumer','Corporate')

SELECT * FROM CC_SEGMENTS
________________________________________________________________________________________________________________________
CREATE TABLE ESC_REGION AS
SELECT
			ORDER_ID,
			ORDER_DATE,
			ORDER_PRIORITY,
			SHIP_DATE,
			SHIPPING_DELAY,
			SHIP_MODE,
			SHIPPING_COST,
			CUSTOMER_ID,
			CUSTOMER_NAME,
			SEGMENT,
			CUSTOMER_TENURE,
			PAYMENT_METHOD,
			COUNTRY,
			STATE,
			CITY,
			POSTAL_CODE,
			REGION,
			PRODUCT_ID,
			PRODUCT_NAME,
			CATEGORY,
			SUB_CATEGORY,
			PRODUCT_RATING,
			MARKETING_CHANNEL,
			QUANTITY,
			RETURN_STATUS,
			DISCOUNT,
			SALES,
			PROFIT,
			PROFIT_MARGIN,
			DISCOUNT_REASON
	FROM
		SUPERSTORE
	WHERE 
		REGION IN ('East','South','Central')
		
SELECT * FROM ESC_REGION
___________________________________________________________________________________________________________________________________-


CREATE TABLE BUSINESS_CRITICAL_ANALYSIS AS
SELECT
			ORDER_ID,
			ORDER_DATE,
			ORDER_PRIORITY,
			SHIP_DATE,
			SHIPPING_DELAY,
			SHIP_MODE,
			SHIPPING_COST,
			CUSTOMER_ID,
			CUSTOMER_NAME,
			SEGMENT,
			CUSTOMER_TENURE,
			PAYMENT_METHOD,
			COUNTRY,
			STATE,
			CITY,
			POSTAL_CODE,
			REGION,
			PRODUCT_ID,
			PRODUCT_NAME,
			CATEGORY,
			SUB_CATEGORY,
			PRODUCT_RATING,
			MARKETING_CHANNEL,
			QUANTITY,
			RETURN_STATUS,
			DISCOUNT,
			SALES,
			PROFIT,
			PROFIT_MARGIN,
			DISCOUNT_REASON
	FROM
		SUPERSTORE
	WHERE 
		RETURN_STATUS IN ('Yes')
		OR
			PROFIT < 0
			OR
				DISCOUNT * 100 >= 20

SELECT * FROM BUSINESS_CRITICAL_ANALYSIS
